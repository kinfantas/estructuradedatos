**************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

***************************/
#include <iostream>
#include <string>

using namespace std;

class Nodo
{
	public:
		int dato;
		string nombre;
		Nodo* sig;
	};


class Pila {
		Nodo* inicio;
public:
		Pila() {
			inicio = NULL;
		}

void push() {
    int valor;
    string valor2;
    Nodo* aux = new Nodo;
    // ubica espacio de memoria para crear una instancia del Nodo: operator new (Nodo))
   // y entonces construye un objeto en el nuevo espacio ubicado
    system("cls");
    cout << "Ingresa el id del proceso: ";
    cin >> valor;
    cout << "Ingresa el nombre del proceso: ";
    cin.ignore();
    getline(cin, valor2);
    aux->dato = valor;
    aux->nombre = valor2;
    aux->sig = NULL;
    //Accede al elemento dato de Nodo y le asigna valor.
    if (inicio != NULL)
        aux->sig = inicio;
    inicio = aux;
    cout << "Nuevo proceso insertado en la Pila!\n";
    system("pause");
}

void pop() {
    Nodo* temp = new Nodo;
    if (inicio == NULL) {
        system("cls");
        cout << "\nLa Pila esta vacia!\n\n";
        system("pause");
    }
    else {
        temp = inicio;
        inicio = inicio->sig;
        system("cls");
        cout << "\nEl proceso eliminado es: " << temp->dato << " - " << temp->nombre << "\n" << endl;
        delete temp;
        system("pause");
    }
}

void show() {
    Nodo* aux1 = inicio;
    if (inicio == NULL) {
        system("cls");
        cout << "\nLa Pila esta vacia!\n\n";
        system("pause");
    }
    else {
        system("cls");
        cout << "Procesos:\n" << endl;
        while (aux1 != NULL) {
            cout << aux1->dato << " - " << aux1->nombre << "\n" << endl;
            aux1 = aux1->sig;
        }
        system("pause");
    }
}

void top() {
    Nodo* aux1 = inicio;
    if (inicio == NULL) {
        system("cls");
        cout << "\nLa Pila esta vacia!\n\n";
        system("pause");
    }
    else {
        system("cls");
        cout << "Proceso TOP:\n" << endl;
        cout << aux1->dato << " - " << aux1->nombre << "\n" << endl;
        system("pause");
    }
}

void size() {
    Nodo* aux1 = inicio;
    if (inicio == NULL) {
        system("cls");
        cout << "\nLa Pila esta vacia!\n\n";
        system("pause");
    }
    else {
        int contador = 0;
        while (aux1) {
            contador++;
            aux1 = aux1->sig;
        }
        system("cls");
        cout << "El tamano de la Pila es: '" << contador << "'\n" << endl;
        system("pause");
    }
}
};

// ejemploPiladinamica.cpp : Este archivo contiene la función "main". La ejecución del programa comienza y termina ahí.
//

#include <iostream>

using namespace std;

int main() {
    Nodo nuevo;
    Pila l;
    int opcion;
    do {
        cout << "[:]Pila en lista enlazada" << endl;
        cout << "[1]Push" << endl;
        cout << "[2]Pop" << endl;
        cout << "[3]Mostrar" << endl;
        cout << "[4]Top" << endl;
        cout << "[5]Size" << endl;
        cout << "[0]Salir" << endl;
        cout << "\nIngresa tu opcion: ";
        cin >> opcion;
        switch (opcion) {
        case 1:
            l.push();
            break;
        case 2:
            l.pop();
            break;
        case 3:
            l.show();
            break;
        case 4:
            l.top();
            break;
        case 5:
            l.size();
            break;
        case 0:
            return 0;
            break;
        default:
            cout << "Por favor ingresa una opcion correcta.\n";
            break;
        }
    } while (opcion != 0);
    return 0;
}
