/*---------------------------------------------------------------+
+ ejemplo de una cola doblemente enlazada (Dqueue) basada en un +
+ arreglo dinámico +
+ +
+ Autor: Oscar E. Palacios +
+ email: oscarpalacios1@yahoo.com.mx +
+ +
+ Manifiesto: +
+ Este programa puede distribuirse, copiarse y modificarse de +
+ forma libre. +
+---------------------------------------------------------------*/

#include <iostream.h>
#include <conio.h>

// using namespace std;

typedef char DATA_TYPE;

struct nodo {
    DATA_TYPE data;
    nodo *next, *prev;
};

class DDqueue {

    int  itemsize, items;
    nodo *cola, *cabeza;


public:
    // constructor
    DDqueue() : cola(NULL), cabeza(NULL), items(0), itemsize(sizeof(DATA_TYPE)) {}

    // destructor
    ~DDqueue() {}


/* agregar componente en la parte tracera de la lista */
DATA_TYPE put_back(DATA_TYPE valor)
{
    nodo *temp;

    temp = new nodo;
    if (temp == NULL) return -1;

    temp->data = valor;

    items ++;
    if (cabeza == NULL )
    {
	temp->next = NULL;
	temp->prev = NULL;
	cabeza = temp;
	cola = temp;
    } else
	{
	 cola->next = temp;
	 temp->prev = cola;
	 cola = temp;
	 cola->next = NULL;
	}
    return valor;
}

/* agregar componente en la parte frontal de la lista */
DATA_TYPE put_front(DATA_TYPE valor)
{
    nodo *temp;

    temp = new nodo;
    if (temp == NULL) return -1;

    temp->data = valor;

    items ++;
    if (cabeza == NULL )
    {
	temp->next = NULL;
	temp->prev = NULL;
	cabeza = temp;
	cola = temp;
    } else
	{
	 cabeza->prev = temp;
	 temp->next = cabeza;
	 cabeza = temp;
	 cabeza->prev = NULL;
	}
    return valor;
}

// regresa true si la lista está vacia
int empty() { return items == 0; }


/* retirar elemento de la parte frontal lista */
DATA_TYPE get_front()
{
    nodo *temp;
    DATA_TYPE d;

    if ( empty() ) return -1;

    items --;
    d = cabeza->data;
    temp = cabeza->next;
    if (cabeza) delete cabeza;
    cabeza = temp;
    return d;
}

/* retirar elemento de la parte tracera de la lista */
DATA_TYPE get_back()
{
    nodo *temp;
    DATA_TYPE d;

    if ( empty() ) return -1;

    items--;
    d = cola->data;
    temp = cola->prev;
    if (cola) delete cola;
    cola = temp;
    return d;
}

}; // fin de la clase DDqueue

/* punto de prueba */
int main()
{
    clrscr();

    DDqueue s;
    DATA_TYPE d;

    // insertando elementos en la parte tracera
    for (d='A'; d<='Z'; d++) s.put_back(d);

    // insertando en la parte delantera
    for (d=9; d>=0; d--)s.put_front(d+'0');

    // vaciando la lista
    while ( ! s.empty() )
	cout << (DATA_TYPE)s.get_front() << " ";

    cout << "\nPara terminar presione <Enter>...";
    cin.get();
    return 0;
}

// Con clases 

#include <iostream>
using namespace std;

// Definimos el tipo de dato que manejará la cola
typedef char DATA_TYPE;

// Clase Nodo: representa cada elemento de la cola
class Nodo {
public:
    DATA_TYPE data;
    Nodo* next;
    Nodo* prev;

    // Constructor
    Nodo(DATA_TYPE valor) : data(valor), next(nullptr), prev(nullptr) {}
};

// Clase Cola Doblemente Enlazada (DQueue)
class DDQueue {
private:
    Nodo* cabeza;  // Apunta al primer nodo
    Nodo* cola;    // Apunta al último nodo
    int items;     // Cantidad de elementos

public:
    // Constructor
    DDQueue() : cabeza(nullptr), cola(nullptr), items(0) {}

    // Destructor: elimina todos los nodos
    ~DDQueue() {
        while (!empty()) {
            get_front(); // Libera memoria
        }
    }

    // Agregar un dato al final
    void put_back(DATA_TYPE valor) {
        Nodo* temp = new Nodo(valor);
        if (!cabeza) {   // if (cabeza == nullptr)
            cabeza = cola = temp;
        } else {
            cola->next = temp;
            temp->prev = cola;
            cola = temp;
        }
        items++;
    }

    // Agregar un dato al inicio
    void put_front(DATA_TYPE valor) {
        Nodo* temp = new Nodo(valor);
        if (!cabeza) {
            cabeza = cola = temp;
        } else {
            cabeza->prev = temp;
            temp->next = cabeza;
            cabeza = temp;
        }
        items++;
    }

    // Eliminar y devolver el dato del inicio
    DATA_TYPE get_front() {
        if (empty()) return -1;
        DATA_TYPE valor = cabeza->data;
        Nodo* temp = cabeza;
        cabeza = cabeza->next;

        if (cabeza) cabeza->prev = nullptr;
        else cola = nullptr;

        delete temp;
        items--;
        return valor;
    }

    // Eliminar y devolver el dato del final
    DATA_TYPE get_back() {
        if (empty()) return -1;
        DATA_TYPE valor = cola->data;
        Nodo* temp = cola;
        cola = cola->prev;

        if (cola) cola->next = nullptr;
        else cabeza = nullptr;

        delete temp;
        items--;
        return valor;
    }

    // Verifica si la cola está vacía
    bool empty() const {
        return items == 0;
    }

    // Muestra todos los elementos de la cola
    void mostrar() const {
        Nodo* actual = cabeza;
        while (actual) {
            cout << actual->data << " ";
            actual = actual->next;
        }
        cout << endl;
    }
};

// Función principal para probar la clase
int main() {
    DDQueue cola;

    // Insertar letras A-Z al final
    for (char c = 'A'; c <= 'Z'; c++) {
        cola.put_back(c);
    }

    // Insertar dígitos 9-0 al inicio
    for (int i = 9; i >= 0; i--) {
        cola.put_front(i + '0');
    }

    // Mostrar y vaciar la cola
    cout << "Contenido de la cola (de frente a fondo):" << endl;
    while (!cola.empty()) {
        cout << cola.get_front() << " ";
    }

    cout << "\nFin del programa.\n";
    return 0;
}
